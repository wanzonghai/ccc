{"version":3,"sources":["file:///E:/Cocos/Project/ROYALTEENPATTI/assets/scripts/manages/DynamicAssetMgr.ts"],"names":["DynamicAssetMgr","resources","assetManager","Singleton","_assetMap","_assetRefCountMap","public","init","Map","console","log","load","node","url","assetType","callBackFun","Promise","resolve","reject","Array","isArray","err","assets","error","message","pushAsset","asset","loadDir","loadBundel","loadBundle","bundle","loadBundelDir","removeBundleRes","$bundleName","getBundle","removeBundle","releaseBundleResOnce","$releasetype","$isRemoveBundle","$resName","$resType","release","releaseAll","isValid","nodeId","uuid","as","extracted","decRef","assetArray","get","indexOf","addRef","push","set","pullAsset","source","has","name","delete","getSize","size","getKeys","keys","fanxing","value"],"mappings":";;;mHAOqBA,e;;;;;;;;;;;;;;;AAHLC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,Y,OAAAA,Y;;AAClBC,MAAAA,S,iBAAAA,S;;;;;;AALT;AACA;AACA;;;;;yBAKqBH,e,GAAN,MAAMA,eAAN;AAAA;AAAA,kCAAyD;AAAA;AAAA;AAAA,eAC5DI,SAD4D,GAC1B,IAD0B;AAAA,eAE5DC,iBAF4D,GAEnB,IAFmB;AAAA,eAGpEC,MAHoE;AAAA;;AAIpE;AACJ;AACA;AACIC,QAAAA,IAAI,GAAG;AACH,eAAKH,SAAL,GAAiB,IAAII,GAAJ,EAAjB;AACA,eAAKH,iBAAL,GAAyB,IAAIG,GAAJ,EAAzB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWC,QAAAA,IAAI,CAACC,IAAD,EAAaC,GAAb,EAAqCC,SAArC,EAA8DC,WAA9D,EAAqF;AAC5F,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,gBAAIN,IAAI,IAAIC,GAAZ,EAAiB;AACb,kBAAIM,KAAK,CAACC,OAAN,CAAcP,GAAd,CAAJ,EACIZ,SAAS,CAACU,IAAV,CAAeE,GAAf,EAAoBC,SAApB,EAA+B,CAACO,GAAD,EAAMC,MAAN,KAA0B;AACrD,oBAAID,GAAJ,EAAS;AACLZ,kBAAAA,OAAO,CAACc,KAAR,CAAcF,GAAG,CAACG,OAAJ,IAAeH,GAA7B;AACAH,kBAAAA,MAAM,CAACG,GAAD,CAAN;AACA;AACH;;AACD,oBAAI,KAAKI,SAAL,CAAeb,IAAf,EAAqBU,MAArB,CAAJ,EAAkC;AAC9BP,kBAAAA,WAAW,CAACO,MAAD,CAAX;AACAL,kBAAAA,OAAO,CAACK,MAAD,CAAP;AACH,iBAHD,MAGO;AACHJ,kBAAAA,MAAM;AACT;AACJ,eAZD,EADJ,KAeIjB,SAAS,CAACU,IAAV,CAAeE,GAAf,EAAoBC,SAApB,EAA+B,CAACO,GAAD,EAAMK,KAAN,KAAuB;AAClD,oBAAIL,GAAJ,EAAS;AACLZ,kBAAAA,OAAO,CAACc,KAAR,CAAcF,GAAG,CAACG,OAAJ,IAAeH,GAA7B;AACAH,kBAAAA,MAAM,CAACG,GAAD,CAAN;AACA;AACH;;AACD,oBAAI,KAAKI,SAAL,CAAeb,IAAf,EAAqBc,KAArB,CAAJ,EAAiC;AAC7BX,kBAAAA,WAAW,CAACW,KAAD,CAAX;AACAT,kBAAAA,OAAO,CAACS,KAAD,CAAP;AACH,iBAHD,MAGO;AACHR,kBAAAA,MAAM;AACT;AACJ,eAZD;AAaP;AACJ,WA/BM,CAAP;AAgCH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWS,QAAAA,OAAO,CAACf,IAAD,EAAaC,GAAb,EAA0BC,SAA1B,EAAmDC,WAAnD,EAA0E;AACpF,cAAIH,IAAI,IAAIC,GAAZ,EAAiB;AACbZ,YAAAA,SAAS,CAAC0B,OAAV,CAAkBd,GAAlB,EAAuBC,SAAvB,EAAkC,CAACO,GAAD,EAAMC,MAAN,KAA0B;AACxD,kBAAID,GAAJ,EAAS;AACLZ,gBAAAA,OAAO,CAACc,KAAR,CAAcF,GAAG,CAACG,OAAJ,IAAeH,GAA7B;AACA;AACH;;AACD,kBAAI,KAAKI,SAAL,CAAeb,IAAf,EAAqBU,MAArB,CAAJ,EAAkC;AAC9BP,gBAAAA,WAAW,CAACO,MAAD,CAAX;AACH;AACJ,aARD;AASH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWM,QAAAA,UAAU,CAAChB,IAAD,EAAaC,GAAb,EAAqCC,SAArC,EAA8DC,WAA9D,EAAqF;AAClGb,UAAAA,YAAY,CAAC2B,UAAb,CAAwB,QAAxB,EAAkC,CAACR,GAAD,EAAaS,MAAb,KAA6C;AAC3E,gBAAIlB,IAAI,IAAIC,GAAZ,EAAiB;AACb,kBAAIM,KAAK,CAACC,OAAN,CAAcP,GAAd,CAAJ,EACIiB,MAAM,CAACnB,IAAP,CAAYE,GAAZ,EAAiBC,SAAjB,EAA4B,CAACO,GAAD,EAAMC,MAAN,KAA0B;AAClD,oBAAID,GAAJ,EAAS;AACLZ,kBAAAA,OAAO,CAACc,KAAR,CAAcF,GAAG,CAACG,OAAJ,IAAeH,GAA7B;AACA;AACH;;AACD,oBAAI,KAAKI,SAAL,CAAeb,IAAf,EAAqBU,MAArB,CAAJ,EAAkC;AAC9BP,kBAAAA,WAAW,CAACO,MAAD,CAAX;AACH;AACJ,eARD,EADJ,KAWIQ,MAAM,CAACnB,IAAP,CAAYE,GAAZ,EAAiBC,SAAjB,EAA4B,CAACO,GAAD,EAAMK,KAAN,KAAuB;AAC/C,oBAAIL,GAAJ,EAAS;AACLZ,kBAAAA,OAAO,CAACc,KAAR,CAAcF,GAAG,CAACG,OAAJ,IAAeH,GAA7B;AACA;AACH;;AACD,oBAAI,KAAKI,SAAL,CAAeb,IAAf,EAAqBc,KAArB,CAAJ,EAAiC;AAC7BX,kBAAAA,WAAW,CAACW,KAAD,CAAX;AACH;AACJ,eARD;AASP;AACJ,WAvBD;AAwBH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWK,QAAAA,aAAa,CAACnB,IAAD,EAAaC,GAAb,EAA0BC,SAA1B,EAAmDC,WAAnD,EAA0E;AAC1Fb,UAAAA,YAAY,CAAC2B,UAAb,CAAwB,QAAxB,EAAkC,CAACR,GAAD,EAAaS,MAAb,KAA6C;AAC3E,gBAAIlB,IAAI,IAAIC,GAAZ,EAAiB;AACbiB,cAAAA,MAAM,CAACH,OAAP,CAAed,GAAf,EAAoBC,SAApB,EAA+B,CAACO,GAAD,EAAMC,MAAN,KAA0B;AACrD,oBAAID,GAAJ,EAAS;AACLZ,kBAAAA,OAAO,CAACc,KAAR,CAAcF,GAAG,CAACG,OAAJ,IAAeH,GAA7B;AACA;AACH;;AACD,oBAAI,KAAKI,SAAL,CAAeb,IAAf,EAAqBU,MAArB,CAAJ,EAAkC;AAC9BP,kBAAAA,WAAW,CAACO,MAAD,CAAX;AACH;AACJ,eARD;AASH;AACJ,WAZD;AAaH;AACD;AACJ;;;AACWU,QAAAA,eAAe,CAACC,WAAD,EAAsB;AACxC,cAAIH,MAAM,GAAG5B,YAAY,CAACgC,SAAb,CAAuBD,WAAvB,CAAb;AACA/B,UAAAA,YAAY,CAACiC,YAAb,CAA0BL,MAA1B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACWM,QAAAA,oBAAoB,CAACC,YAAD,EAAuBJ,WAAvB,EAA4CK,eAAwB,GAAG,IAAvE,EAA6EC,QAA7E,EAAgGC,QAAhG,EAAuI;AAC9J;AACA,cAAIV,MAAM,GAAG5B,YAAY,CAACgC,SAAb,CAAuBD,WAAvB,CAAb;;AACA,kBAAQI,YAAR;AACI,iBAAK,CAAL;AACIP,cAAAA,MAAM,CAACW,OAAP,CAAeF,QAAf,EAAyBC,QAAzB;AACA;;AACJ,iBAAK,CAAL;AACI;AACAV,cAAAA,MAAM,CAACY,UAAP;;AACJ;AACI;AARR,WAH8J,CAa9J;;;AACAJ,UAAAA,eAAe,IAAIpC,YAAY,CAACiC,YAAb,CAA0BL,MAA1B,CAAnB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACYL,QAAAA,SAAS,CAACb,IAAD,EAAac,KAAb,EAA8C;AAC3D,cAAId,IAAI,IAAIA,IAAI,CAAC+B,OAAjB,EAA0B;AACtB,gBAAIC,MAAc,GAAGhC,IAAI,CAACiC,IAA1B;;AACA,gBAAI,CAACD,MAAD,IAAW,CAAClB,KAAhB,EAAuB;AACnBjB,cAAAA,OAAO,CAACC,GAAR,CAAa,yBAAwBkC,MAAO,UAASlB,KAAM,EAA3D;AACA,qBAAO,KAAP;AACH;;AACD,gBAAIA,KAAK,YAAYP,KAArB,EAA4B;AACxB,mBAAK,IAAI2B,EAAT,IAAepB,KAAf,EAAsB;AAClB,qBAAKqB,SAAL,CAAeD,EAAf,EAAmBF,MAAnB;AACH;AACJ,aAJD,MAIO;AACH,mBAAKG,SAAL,CAAerB,KAAf,EAAsBkB,MAAtB;AACH;;AACD,mBAAO,IAAP;AACH,WAdD,MAcO;AACH,gBAAIlB,KAAJ,EAAW;AACPjB,cAAAA,OAAO,CAACC,GAAR,CAAa,OAAb;;AACA,kBAAIgB,KAAK,YAAYP,KAArB,EAA4B;AACxB,qBAAK,IAAI2B,EAAT,IAAepB,KAAf,EAAsB;AAClBoB,kBAAAA,EAAE,CAACE,MAAH;AACH;AACJ,eAJD,MAIO;AACHtB,gBAAAA,KAAK,CAACsB,MAAN;AACH;AACJ;;AACD,mBAAO,KAAP;AACH;AACJ,SAjMmE,CAkMpE;;;AACQD,QAAAA,SAAS,CAACrB,KAAD,EAAekB,MAAf,EAA+B;AAC5C,cAAIK,UAAmB,GAAG,KAAK7C,SAAL,CAAe8C,GAAf,CAAmBN,MAAnB,CAA1B;;AACA,cAAI,CAACK,UAAL,EAAiB;AACbA,YAAAA,UAAU,GAAG,EAAb;AACH,WAJ2C,CAK5C;;;AACA,cAAIA,UAAU,CAACE,OAAX,CAAmBzB,KAAnB,IAA4B,CAAhC,EAAmC;AAC/BA,YAAAA,KAAK,CAAC0B,MAAN;AACAH,YAAAA,UAAU,CAACI,IAAX,CAAgB3B,KAAhB;;AACA,iBAAKtB,SAAL,CAAekD,GAAf,CAAmBV,MAAnB,EAA2BK,UAA3B;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACWM,QAAAA,SAAS,CAAC3C,IAAD,EAAa4C,MAAb,EAA6B;AACzC,cAAI5C,IAAI,IAAIA,IAAI,CAAC+B,OAAjB,EAA0B;AACtB,gBAAIC,MAAc,GAAGhC,IAAI,CAACiC,IAA1B;;AACA,gBAAI,KAAKzC,SAAL,CAAeqD,GAAf,CAAmBb,MAAnB,CAAJ,EAAgC;AAC5B,kBAAIK,UAAmB,GAAG,KAAK7C,SAAL,CAAe8C,GAAf,CAAmBN,MAAnB,CAA1B;;AACA,mBAAK,IAAIE,EAAT,IAAeG,UAAf,EAA2B;AACvBxC,gBAAAA,OAAO,CAACC,GAAR,CAAa,QAAOoC,EAAE,CAACY,IAAK,EAA5B;AACAZ,gBAAAA,EAAE,CAACE,MAAH;AACH;;AACD,mBAAK5C,SAAL,CAAeuD,MAAf,CAAsBf,MAAtB;AACH;AACJ,WAVD,MAUO;AACHnC,YAAAA,OAAO,CAACc,KAAR,CAAe,qBAAoBiC,MAAO,EAA1C;AACH;AACJ;AAED;AACJ;AACA;;;AACWI,QAAAA,OAAO,GAAG;AACb,iBAAO,KAAKxD,SAAL,CAAeyD,IAAtB;AACH;AAED;AACJ;AACA;;;AACWC,QAAAA,OAAO,GAAG;AACb,iBAAO,KAAK1D,SAAL,CAAe2D,IAAf,EAAP;AACH;;AAEMC,QAAAA,OAAO,CAAIC,KAAJ,EAAc,CACxB;AACH;;AArPmE,O","sourcesContent":["/**\n * 动态资源加载管理类\n */\n\nimport { Asset, resources, assetManager, AssetManager, SpriteFrame, Prefab, Node } from 'cc';\nimport { Singleton } from '../bases/Singleton';\n\nexport default class DynamicAssetMgr extends Singleton<DynamicAssetMgr> {\n    private _assetMap: Map<string, Asset[]> = null;\n    private _assetRefCountMap: Map<string, number> = null;\n    public;\n    /**\n     * 初始化\n     */\n    init() {\n        this._assetMap = new Map<string, Asset[]>();\n        this._assetRefCountMap = new Map<string, number>();\n        console.log('Dynamic resource Manager initialization is complete');\n    }\n\n    /**\n     * 动态加载资源(可以同时加载多个资源)\n     * @param node 加载的节点 作为托管驻点\n     * @param url 资源路径\n     * @param callBackFun 加载完成返回\n     */\n    public load(node: Node, url: string | string[], assetType: typeof Asset, callBackFun: Function) {\n        return new Promise((resolve, reject) => {\n            if (node && url) {\n                if (Array.isArray(url))\n                    resources.load(url, assetType, (err, assets: Asset[]) => {\n                        if (err) {\n                            console.error(err.message || err);\n                            reject(err);\n                            return;\n                        }\n                        if (this.pushAsset(node, assets)) {\n                            callBackFun(assets);\n                            resolve(assets);\n                        } else {\n                            reject();\n                        }\n                    });\n                else\n                    resources.load(url, assetType, (err, asset: Asset) => {\n                        if (err) {\n                            console.error(err.message || err);\n                            reject(err);\n                            return;\n                        }\n                        if (this.pushAsset(node, asset)) {\n                            callBackFun(asset);\n                            resolve(asset);\n                        } else {\n                            reject();\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * 动态加载目录全部资源\n     * @param node\n     * @param url\n     * @param callBackFun\n     */\n    public loadDir(node: Node, url: string, assetType: typeof Asset, callBackFun: Function) {\n        if (node && url) {\n            resources.loadDir(url, assetType, (err, assets: Asset[]) => {\n                if (err) {\n                    console.error(err.message || err);\n                    return;\n                }\n                if (this.pushAsset(node, assets)) {\n                    callBackFun(assets);\n                }\n            });\n        }\n    }\n\n    /**\n     * 动态加载资源(可以同时加载多个资源) Bundel\n     * @param node\n     * @param url\n     * @param callBackFun\n     */\n    public loadBundel(node: Node, url: string | string[], assetType: typeof Asset, callBackFun: Function) {\n        assetManager.loadBundle('bundle', (err: Error, bundle: AssetManager.Bundle) => {\n            if (node && url) {\n                if (Array.isArray(url))\n                    bundle.load(url, assetType, (err, assets: Asset[]) => {\n                        if (err) {\n                            console.error(err.message || err);\n                            return;\n                        }\n                        if (this.pushAsset(node, assets)) {\n                            callBackFun(assets);\n                        }\n                    });\n                else\n                    bundle.load(url, assetType, (err, asset: Asset) => {\n                        if (err) {\n                            console.error(err.message || err);\n                            return;\n                        }\n                        if (this.pushAsset(node, asset)) {\n                            callBackFun(asset);\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * 动态加载目录全部资源 Bundel\n     * @param node\n     * @param url\n     * @param callBackFun\n     */\n    public loadBundelDir(node: Node, url: string, assetType: typeof Asset, callBackFun: Function) {\n        assetManager.loadBundle('bundle', (err: Error, bundle: AssetManager.Bundle) => {\n            if (node && url) {\n                bundle.loadDir(url, assetType, (err, assets: Asset[]) => {\n                    if (err) {\n                        console.error(err.message || err);\n                        return;\n                    }\n                    if (this.pushAsset(node, assets)) {\n                        callBackFun(assets);\n                    }\n                });\n            }\n        });\n    }\n    /**在加载了AB包之后，此 bundle 会一直存在整个游戏过程中，除非开发者手动移除\n     * 当手动移除了某个不需要的 bundle，那么此 bundle 的缓存也会被移除，如果需要再次使用，则必须再重新加载一次 */\n    public removeBundleRes($bundleName: string) {\n        let bundle = assetManager.getBundle($bundleName);\n        assetManager.removeBundle(bundle);\n    }\n    /**\n     *在移除AB包时，并不会释放该 bundle 中加载过的资源\n     *如果需要释放，请先使用AB包的 release / releaseAll 方法：\n     * @param {number} $releasetype 释放类型 1：单个资源 2：整个包\n     * @param {string} $bundleName  释放AB包名字\n     * @param {string} $resName     释放的资源名字\n     * @param {(SpriteFrame|Prefab|any)} $resType 释放的资源类型\n     * @memberof manage_res\n     */\n    public releaseBundleResOnce($releasetype: number, $bundleName: string, $isRemoveBundle: boolean = true, $resName?: string, $resType?: SpriteFrame | Prefab | any) {\n        // 释放在AB包中的单个资源\n        let bundle = assetManager.getBundle($bundleName);\n        switch ($releasetype) {\n            case 1:\n                bundle.release($resName, $resType);\n                break;\n            case 2:\n                // 释放所有属于AB包的资源\n                bundle.releaseAll();\n            default:\n                break;\n        }\n        //单个资源时 决定是否释放整个包\n        $isRemoveBundle && assetManager.removeBundle(bundle);\n    }\n\n    /**\n     * 托管资源\n     * @param node\n     * @param asset\n     */\n    private pushAsset(node: Node, asset: Asset | Asset[]): boolean {\n        if (node && node.isValid) {\n            let nodeId: string = node.uuid;\n            if (!nodeId || !asset) {\n                console.log(`pushAsset参数不正确:nodeId:${nodeId},asset:${asset}`);\n                return false;\n            }\n            if (asset instanceof Array) {\n                for (let as of asset) {\n                    this.extracted(as, nodeId);\n                }\n            } else {\n                this.extracted(asset, nodeId);\n            }\n            return true;\n        } else {\n            if (asset) {\n                console.log(`还没加载完`);\n                if (asset instanceof Array) {\n                    for (let as of asset) {\n                        as.decRef();\n                    }\n                } else {\n                    asset.decRef();\n                }\n            }\n            return false;\n        }\n    }\n    //增加计数\n    private extracted(asset: Asset, nodeId: string) {\n        let assetArray: Asset[] = this._assetMap.get(nodeId);\n        if (!assetArray) {\n            assetArray = [];\n        }\n        //同一个节点只增加一次计数\n        if (assetArray.indexOf(asset) < 0) {\n            asset.addRef();\n            assetArray.push(asset);\n            this._assetMap.set(nodeId, assetArray);\n        }\n    }\n\n    /**\n     * 释放资源\n     * @param node\n     * @param source\n     */\n    public pullAsset(node: Node, source: string) {\n        if (node && node.isValid) {\n            let nodeId: string = node.uuid;\n            if (this._assetMap.has(nodeId)) {\n                let assetArray: Asset[] = this._assetMap.get(nodeId);\n                for (let as of assetArray) {\n                    console.log(`释放资源:${as.name}`);\n                    as.decRef();\n                }\n                this._assetMap.delete(nodeId);\n            }\n        } else {\n            console.error(`无法释放资源:传了个null,源头:${source}`);\n        }\n    }\n\n    /**\n     * 当前资源种类数量\n     */\n    public getSize() {\n        return this._assetMap.size;\n    }\n\n    /**\n     * 资源keys\n     */\n    public getKeys() {\n        return this._assetMap.keys();\n    }\n\n    public fanxing<T>(value: T) {\n        // return value;\n    }\n}\n"]}