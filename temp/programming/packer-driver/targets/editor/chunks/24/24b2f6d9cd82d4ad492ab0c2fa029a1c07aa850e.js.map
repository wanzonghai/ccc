{"version":3,"sources":["file:///E:/Cocos/Project/ROYALTEENPATTI/assets/scripts/manages/ResMgr.ts"],"names":["ResMgr","JsonAsset","NodePool","Prefab","instantiate","log","resources","sys","native","assetManager","loader","Singleton","constructor","allJsonAsset","_allResources","Node","AnimationClip","ParticleAsset","TiledMapAsset","Mesh","AudioClip","Font","SceneAsset","SpriteAtlas","SpriteFrame","TextAsset","Texture2D","Material","DragonBonesAsset","DragonBonesAtlasAsset","init","getResourcesName","path","index","lastIndexOf","slice","getResourcesTypeName","name","initNodePool","typeRes","Promise","resolve","reject","loadDir","err","assets","forEach","element","hasNode","addRef","putRes","putNodePool","resName","getRes","resPool","getResPool","getNodePool","size","get","typeName","targetRes","type","_targetRes","put","getResPoolSize","length","getNodePoolSize","clearResPool","clearNodePool","clear","getResPoolElement","targetName","Error","error","loadJsonFile","objects","includes","push","writeDataRes","loadBundle","fileUtils","getWritablePath","bundle","isNative","writeToFile","new","fullPathForFilename","writeStringToFile","JSON","stringify","getValueMapFromFile","arry","getStringFromFile","load","res","list","a","readDataRes","_instance"],"mappings":"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","sourcesContent":["import { Asset, JsonAsset, NodePool, Prefab, instantiate, log, resources, sys, native, assetManager, loader } from 'cc';\r\nimport { Singleton } from '../bases/Singleton';\r\nimport { IInterResources } from '../tools/interface';\r\n\r\nexport default class ResMgr extends Singleton<ResMgr> {\r\n    public allJsonAsset: JsonAsset[] = [];\r\n    private static _instance: ResMgr = null;\r\n    //类中对资源接口的声明，必须声明接口中的全部属性或者方法\r\n    public _allResources: IInterResources = {\r\n        Node: {},\r\n        Prefab: {},\r\n        NodePool: {},\r\n        AnimationClip: {},\r\n        ParticleAsset: {},\r\n        TiledMapAsset: {},\r\n        Mesh: {},\r\n        AudioClip: {},\r\n        Font: {},\r\n        JsonAsset: {},\r\n        SceneAsset: {},\r\n        SpriteAtlas: {},\r\n        SpriteFrame: {},\r\n        TextAsset: {},\r\n        Texture2D: {},\r\n        Material: {},\r\n        DragonBonesAsset: {},\r\n        DragonBonesAtlasAsset: {},\r\n    };\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public init(): void {\r\n        this._allResources = {\r\n            Node: {},\r\n            Prefab: {},\r\n            NodePool: {},\r\n            AnimationClip: {},\r\n            ParticleAsset: {},\r\n            TiledMapAsset: {},\r\n            Mesh: {},\r\n            AudioClip: {},\r\n            Font: {},\r\n            JsonAsset: {},\r\n            SceneAsset: {},\r\n            SpriteAtlas: {},\r\n            SpriteFrame: {},\r\n            TextAsset: {},\r\n            Texture2D: {},\r\n            Material: {},\r\n            DragonBonesAsset: {},\r\n            DragonBonesAtlasAsset: {},\r\n        };\r\n        this.allJsonAsset = [];\r\n    }\r\n    /**\r\n     * 通过路径获取节点资源名称\r\n     * @param {string} path 要获取的节点资源的路径\r\n     * @returns {string} 返回节点名称的字符串\r\n     */\r\n    public getResourcesName(path: string): string {\r\n        let index = path.lastIndexOf('/');\r\n        if (index === -1) {\r\n            return path;\r\n        } else {\r\n            return path.slice(index + 1);\r\n        }\r\n    }\r\n    public getResourcesTypeName(name: string): string {\r\n        let index = name.lastIndexOf('_');\r\n        if (index === -1) {\r\n            return name;\r\n        } else {\r\n            return name.slice(index + 1);\r\n        }\r\n    }\r\n    /**初始化节点池 */\r\n    public initNodePool(path: string, typeRes?: any) {\r\n        return new Promise<void>((resolve, reject) => {\r\n            resources.loadDir(path, Prefab, (err, assets) => {\r\n                if (err) return reject(err);\r\n                assets.forEach((element) => {\r\n                    if ((typeRes && this.hasNode(element.name)) || this.hasNode(element.name)) return;\r\n                    element.addRef();\r\n                    if (typeRes) {\r\n                        this.putRes(element.name, element as Prefab, Prefab);\r\n                    } else {\r\n                        this.putNodePool(element.name, instantiate(element as Prefab));\r\n                    }\r\n                });\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 判断是否已经有了这个节点资源\r\n     * @param {string} resName 判断是否已经存在节点资源的名字\r\n     * @param {string} path 可选配置，节点资源的路径\r\n     * @returns {boolean} 有返回true，没有返回false\r\n     */\r\n    public hasNode<T>(resName: string, path?: string): boolean {\r\n        let name: string;\r\n        if (path) {\r\n            name = this.getResourcesName(path);\r\n        } else {\r\n            name = resName;\r\n        }\r\n        if (this._allResources.Node[name]) {\r\n            return true;\r\n        }\r\n        if (this._allResources.NodePool[name]) {\r\n            return true;\r\n        }\r\n        if (this._allResources.Prefab[name]) {\r\n            return true;\r\n        }\r\n        if (this._allResources.SpriteFrame[name]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 获取节点，如果handle的Map中有就直接获取到，没有的话就实例化出来\r\n     * @param {string} resName 要获取的节点名称\r\n     * @param {string} path 可选参数，资源路径\r\n     * @returns {cc.Node} 返回节点或者undefined\r\n     */\r\n    public getRes<T>(path: string, typeRes?: any): T {\r\n        let resName = this.getResourcesName(path);\r\n        //如果名称为name的节点池不存在，就新建一个；如果存在，判断大小，有就取出来用\r\n        let resPool = null;\r\n        if (typeRes) {\r\n            resPool = this.getResPool(resName, typeRes);\r\n            return resPool[resName];\r\n        } else {\r\n            resPool = this.getNodePool(resName);\r\n            if (resPool.size() > 0) {\r\n                return resPool.get();\r\n            }\r\n        }\r\n    }\r\n    //获取类型的字典容器\r\n    private getResPool<T>(name: string, typeRes: any): T[] {\r\n        let typeName = this.getResourcesTypeName(typeRes.name);\r\n\r\n        let resPool: T[] = this._allResources[typeName];\r\n        if (!resPool) {\r\n            resPool = this._allResources[typeName] = [];\r\n        }\r\n        return resPool;\r\n    }\r\n\r\n    private getNodePool(name: string) {\r\n        let resPool: NodePool = this._allResources.NodePool[name];\r\n        if (!resPool) {\r\n            resPool = this._allResources.NodePool[name] = new NodePool();\r\n        }\r\n        return resPool;\r\n    }\r\n    /**存资源节点 预设等 到字典容器中\r\n     *\r\n     *\r\n     * @template T\r\n     * @param {string} name\r\n     * @param {T} targetRes\r\n     * @param {number} type  1: //   cc.Prefab:2: //   cc.NodePool:3: //   cc.AnimationClip:4: //   cc.ParticleAsset:5: //   cc.TiledMapAsset:6: //   cc.Mesh:7: //   cc.AudioClip:8: //   cc.Font:9: //   cc.JsonAsset:10: //   cc.SceneAsset:11: //   cc.SpriteAtlas:12: //   cc.SpriteFrame:13: //   cc.TextAsset:14: //   cc.Texture2D:15: //   cc.Material:16: //   dragonBones.DragonBonesAsset :17: //   dragonBones.DragonBonesAtlasAsset :18: //cc.Node:\r\n     * @memberof manage_res\r\n     */\r\n    public putRes<T>(name: string, targetRes: any, type?: any) {\r\n        //如果名称为name的节点池不存在，就新建一个；如果存在，判断大小，有就取出来用\r\n        let resPool = this.getResPool(name, type);\r\n        let _targetRes = resPool[name];\r\n        if (_targetRes) {\r\n            return;\r\n        }\r\n        resPool[name] = targetRes;\r\n    }\r\n    public putNodePool<T>(name: string, targetRes: T) {\r\n        //如果名称为name的节点池不存在，就新建一个；如果存在，判断大小，有就取出来用\r\n        let resPool = null;\r\n        resPool = this.getNodePool(name);\r\n        if (resPool[name]) {\r\n            return;\r\n        }\r\n        resPool.put(targetRes);\r\n    }\r\n\r\n    /**获取当前缓冲池的可用对象资源数量\r\n     *\r\n     * @param targetName\r\n     * @returns\r\n     */\r\n    public getResPoolSize<T>(path: string, typeRes: any): number {\r\n        let resName: string = this.getResourcesName(path);\r\n        //如果名称为name的节点池不存在，就新建一个；如果存在，判断大小，有就取出来用\r\n        let resPool: Asset[] = this.getResPool(resName, typeRes);\r\n        return resPool.length;\r\n    }\r\n    public getNodePoolSize<T>(name: string): number {\r\n        //如果名称为name的节点池不存在，就新建一个；如果存在，判断大小，有就取出来用\r\n        let resPool: NodePool = this.getNodePool(name);\r\n        return resPool.size();\r\n    }\r\n    /**销毁对象池中缓存的所有资源\r\n     *\r\n     * @param name\r\n     * @param typeRes\r\n     */\r\n    public clearResPool(path: string, typeRes: any) {\r\n        let resName: string = this.getResourcesName(path);\r\n        //如果名称为name的节点池不存在，就新建一个；如果存在，判断大小，有就取出来用\r\n        let resPool = this.getResPool(resName, typeRes);\r\n        resPool.length = 0;\r\n    }\r\n    public clearNodePool(name: string) {\r\n        //如果名称为name的节点池不存在，就新建一个；如果存在，判断大小，有就取出来用\r\n        let resPool = this.getNodePool(name);\r\n        resPool.clear();\r\n    }\r\n\r\n    public getResPoolElement<T extends Asset>(resPool: T[], targetName: string) {\r\n        let targetRes: T = null;\r\n        try {\r\n            resPool.forEach((element) => {\r\n                if (element.name == targetName) {\r\n                    targetRes = element;\r\n                    throw Error();\r\n                }\r\n            });\r\n        } catch (error) {\r\n            return targetRes;\r\n        }\r\n    }\r\n\r\n    /**json文件\r\n     *\r\n     */\r\n    public loadJsonFile(name) {\r\n        return new Promise<void>((resolve, reject) => {\r\n            resources.loadDir(name, JsonAsset, (err, objects: JsonAsset[]) => {\r\n                if (err) {\r\n                    // Appic.MsgTipMg.show('' + err);\r\n                    reject();\r\n                    return;\r\n                }\r\n                objects.forEach((element) => {\r\n                    if (!this.allJsonAsset.includes(element)) {\r\n                        element.addRef();\r\n                        this.allJsonAsset.push(element);\r\n                    }\r\n                });\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    /**写入数据 */\r\n    public writeDataRes() {\r\n        assetManager.loadBundle(native.fileUtils.getWritablePath() + '/pathToBundle/bundleName', (err, bundle) => {\r\n            // ...\r\n        });\r\n        //writeToFile()写入数据到文件，存储格式为xml，不是Json格式\r\n        if (sys.isNative) {\r\n            log('Path:' + native.fileUtils.getWritablePath());\r\n            log(native.fileUtils.writeToFile({ new: 'value' } + native.fileUtils.getWritablePath() + 'data.json'));\r\n\r\n            log('fullPathForFilename:' + native.fileUtils.fullPathForFilename('resources/data.json'));\r\n        }\r\n        //writeStringToFile()写入数据到文件，存储格式为xml，不是Json格式\r\n        log('writeStringToFile:' + native.fileUtils.writeStringToFile('{\"a\":\"b\",\"c\":\"d\"}', native.fileUtils.getWritablePath() + 'kk.json'));\r\n        log('getValueMapFromFile:' + JSON.stringify(native.fileUtils.getValueMapFromFile(native.fileUtils.getWritablePath() + 'kk.json')));\r\n\r\n        var arry = JSON.stringify(native.fileUtils.getStringFromFile(native.fileUtils.getWritablePath() + 'kk.json'));\r\n        log('arry:' + arry);\r\n\r\n        loader.load(native.fileUtils.getWritablePath() + 'kk.json', function (err, res) {\r\n            if (err) {\r\n                log(err);\r\n            } else {\r\n                let list = res;\r\n                log('list:' + list.a);\r\n            }\r\n        });\r\n    }\r\n    /**读取数据 */\r\n    public readDataRes() {\r\n        log('writeStringToFile:' + native.fileUtils.writeStringToFile('{\"a\":\"b\",\"c\":\"d\"}', native.fileUtils.getWritablePath() + 'kk.json'));\r\n        log('getValueMapFromFile:' + JSON.stringify(native.fileUtils.getValueMapFromFile(native.fileUtils.getWritablePath() + 'kk.json')));\r\n\r\n        var arry = JSON.stringify(native.fileUtils.getStringFromFile(native.fileUtils.getWritablePath() + 'kk.json'));\r\n        log('arry:' + arry);\r\n        return new Promise<any>((resolve, reject) => {\r\n            resources.load(native.fileUtils.getWritablePath() + 'kk.json', (err, res: any) => {\r\n                if (err) {\r\n                    log(err);\r\n                } else {\r\n                    let list = res;\r\n                    resolve(res);\r\n                    log('list:' + list.a);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n"]}