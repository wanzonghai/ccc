{"version":3,"sources":["file:///E:/Cocos/Project/ROYALTEENPATTI/assets/scripts/manages/AudioMgr.ts"],"names":["AudioMgr","AudioClip","AudioSource","Node","director","Singleton","Appic","_audioSource","audioCache","initAudioMgr","audioClipUrls","layer_perRoot","name","getScene","addChild","addPersistRootNode","addComponent","preloadAudioArr","then","console","log","audioSource","preloadAudio","audioClipUrl","audioKey","split","DAM","load","node","clip","Promise","resolve","reject","loadDir","clips","forEach","element","playOneShot","soundName","volume","play","stop","pause","resume"],"mappings":"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","sourcesContent":["import { AudioClip, AudioSource, Node, director, find, resources } from 'cc';\r\nimport { Singleton } from '../bases/Singleton';\r\nimport Appic from '../tools/Appic';\r\nimport { EAudioType } from '../tools/enumes';\r\n\r\nexport class AudioMgr extends Singleton<AudioMgr> {\r\n    private _audioSource: AudioSource;\r\n\r\n    private audioCache: { [key: string]: AudioClip } = {};\r\n\r\n    public initAudioMgr(audioClipUrls: string) {\r\n        //@en create a node as audioMgr\r\n        //@zh 创建一个节点作为 audioMgr\r\n        let layer_perRoot = new Node();\r\n        layer_perRoot.name = 'layer_perRoot';\r\n\r\n        //@en add to the scene.\r\n        //@zh 添加节点到场景\r\n        director.getScene().addChild(layer_perRoot);\r\n        //@en make it as a persistent node, so it won't be destroied when scene change.\r\n        //@zh 标记为常驻节点，这样场景切换的时候就不会被销毁了\r\n        director.addPersistRootNode(layer_perRoot);\r\n        //@en add AudioSource componrnt to play audios.\r\n        //@zh 添加 AudioSource 组件，用于播放音频。\r\n        this._audioSource = layer_perRoot.addComponent(AudioSource);\r\n\r\n        this.preloadAudioArr(audioClipUrls).then(() => {\r\n            console.log(this.audioCache);\r\n        });\r\n    }\r\n    public get audioSource() {\r\n        return this._audioSource;\r\n    }\r\n    public preloadAudio(audioClipUrl: string) {\r\n        if (audioClipUrl) {\r\n            let audioKey: string = audioClipUrl.split('/')[1];\r\n\r\n            Appic.DAM.load(this._audioSource.node, audioClipUrl, AudioClip, (clip) => {\r\n                if (clip) {\r\n                    this.audioCache[audioKey] = clip;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public preloadAudioArr(audioClipUrls: string): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            Appic.DAM.loadDir(this._audioSource.node, audioClipUrls, AudioClip, (clips: AudioClip[]) => {\r\n                clips.forEach((element) => {\r\n                    if (this.audioCache[element.name]) return resolve();\r\n                    this.audioCache[element.name] = element;\r\n                });\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * play short audio, such as strikes,explosions\r\n     * @zh\r\n     * 播放短音频,比如 打击音效，爆炸音效等\r\n     * @param sound clip or url for the audio\r\n     * @param volume\r\n     */\r\n    playOneShot(soundName: EAudioType, volume: number = 1.0) {\r\n        if (this.audioCache[soundName]) {\r\n            this._audioSource.playOneShot(this.audioCache[soundName], volume);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * play long audio, such as the bg music\r\n     * @zh\r\n     * 播放长音频，比如 背景音乐\r\n     * @param sound clip or url for the sound\r\n     * @param volume\r\n     */\r\n    play(soundName: EAudioType, volume: number = 1.0) {\r\n        if (this.audioCache[soundName]) {\r\n            this._audioSource.clip = this.audioCache[soundName];\r\n            this._audioSource.play();\r\n            this.audioSource.volume = volume;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * stop the audio play\r\n     */\r\n    stop() {\r\n        this._audioSource.stop();\r\n    }\r\n\r\n    /**\r\n     * pause the audio play\r\n     */\r\n    pause() {\r\n        this._audioSource.pause();\r\n    }\r\n\r\n    /**\r\n     * resume the audio play\r\n     */\r\n    resume() {\r\n        this._audioSource.play();\r\n    }\r\n}\r\n"]}