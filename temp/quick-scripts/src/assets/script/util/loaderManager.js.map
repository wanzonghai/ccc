{"version":3,"sources":["assets\\script\\util\\loaderManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;IAAA;QAGI;;UAEE;QACM,QAAG,GAAG,EAAE,CAAC;QAEjB;;UAEE;QACM,iBAAY,GAAG;YACnB,QAAQ;SACX,CAAA;IA2EL,CAAC;IAzEG;;MAEE;IACK,8BAAM,GAAZ,UAAa,GAAG,EAAE,gBAAiB,EAAE,IAAK;;;;;;wBACvC,IAAG,GAAG,IAAI,EAAE,IAAI,OAAO,GAAG,IAAI,QAAQ,EAAE;4BACpC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;yBAC3B;wBAEG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;6BAErB,CAAC,GAAG,EAAJ,wBAAI;wBACH,OAAO,CAAC,IAAI,CAAC,6BAAO,GAAG,wEAAc,CAAC,CAAC;wBACjC,qBAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,gBAAgB,EAAE,IAAI,CAAC,EAAA;;wBAArD,GAAG,GAAG,SAA+C,CAAC;wBACtD,sBAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gCACrC,OAAO,CAAC,GAAG,CAAC,CAAC;4BACjB,CAAC,CAAC,EAAA;4BAGN,sBAAO,GAAG,EAAC;;;;KACd;IAED;;MAEE;IACW,+BAAO,GAApB,UAAqB,QAAQ,EAAE,gBAAiB,EAAE,IAAqB;QAArB,qBAAA,EAAA,OAAO,EAAE,CAAC,WAAW;;;;;;;wBAC/D,GAAG,GAAG,IAAI,CAAC;wBACX,UAAU,GAAG,UAAC,UAAU;4BACxB,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gCACrC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gCACnC,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,UAAU,EAAC,UAAC,GAAG,EAAE,EAA0B;oCAClE,IAAG,GAAG,EAAE;wCACJ,OAAO,CAAC,IAAI,CAAC,iBAAK,UAAU,6BAAM,CAAC,CAAC;wCACpC,OAAO,EAAE,CAAC;wCACV,OAAO;qCACV;oCAED,IAAI,YAAY,GAAG,QAAQ,CAAC;oCAC5B,IAAG,IAAI,IAAI,EAAE,CAAC,WAAW,IAAI,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,EAAE,0BAA0B;wCAClF,YAAY,IAAI,cAAc,CAAA;qCACjC;oCAED,EAAE,CAAC,IAAI,CAAC,YAAY,EAAG,IAAI,EAAE,UAAC,GAAG,EAAE,MAAM;wCACrC,IAAG,GAAG,EAAE;4CACJ,OAAO,CAAC,IAAI,CAAC,iBAAK,UAAU,sCAAQ,QAAQ,6BAAM,CAAC,CAAC;4CACpD,OAAO,EAAE,CAAC;4CACV,OAAO;yCACV;wCACD,KAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;wCAC5B,OAAO,CAAC,GAAG,CAAC,2CAAW,QAAQ,+CAAY,UAAY,CAAC,CAAC;wCACzD,OAAO,EAAE,CAAC;wCAEV,GAAG,GAAG,MAAM,CAAC;oCACjB,CAAC,CAAC,CAAA;oCAEF,2BAA2B;oCAC3B,iCAAiC;gCACrC,CAAC,CAAC,CAAC;4BACP,CAAC,CAAC,CAAA;wBACN,CAAC,CAAA;6BACE,gBAAgB,EAAhB,wBAAgB;wBACf,qBAAM,UAAU,CAAC,gBAAgB,CAAC,EAAA;;wBAAlC,SAAkC,CAAC;;;8BAEI,EAAjB,KAAA,IAAI,CAAC,YAAY;;;6BAAjB,CAAA,cAAiB,CAAA;wBAA/B,UAAU;wBACd,IAAG,GAAG;4BAAE,wBAAM;wBACd,qBAAM,UAAU,CAAC,UAAU,CAAC,EAAA;;wBAA5B,SAA4B,CAAC;;;wBAFX,IAAiB,CAAA;;4BAM3C,sBAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;4BACrC,OAAO,CAAC,GAAG,CAAC,CAAC;wBACjB,CAAC,CAAC,EAAC;;;;KACN;IArFsB,sBAAQ,GAAG,IAAI,aAAa,EAAE,CAAC;IAuF1D,oBAAC;CAxFD,AAwFC,IAAA;AAED,kBAAe,aAAa,CAAC,QAAQ,CAAC","file":"","sourceRoot":"/","sourcesContent":["\r\n\r\nclass loaderManager{\r\n    public static readonly instance = new loaderManager();\r\n\r\n    /**\r\n     * 已加载好资源\r\n    */\r\n    private res = {};\r\n\r\n    /**\r\n     * ab包名\r\n    */\r\n    private abBundleName = [\r\n        \"prefab\",\r\n    ]\r\n\r\n    /**\r\n     * 获取资源\r\n    */\r\n     async getRes(key, targetBundleNmae?, type?) {\r\n        if(key == \"\" || typeof key != \"string\") {\r\n            console.warn(\"非法KEY值!\");\r\n        }\r\n\r\n        let res = this.res[key];\r\n\r\n        if(!res) {\r\n            console.warn(`使用资源${key}未加载-现搜索资源加载中`);\r\n            res = await this.loadRes(key, targetBundleNmae, type);\r\n            return new Promise<void>((resolve, reject) => {\r\n                resolve(res);\r\n            })\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * 加载资源\r\n    */\r\n    public async loadRes(fileName, targetBundleNmae?, type = cc.SpriteFrame) {\r\n        let res = null;\r\n        let loadBundle = (bundleName) => {\r\n            return new Promise<void>((resolve, reject) => {\r\n                console.log(\"当前加载包名：\", bundleName);\r\n                cc.assetManager.loadBundle(bundleName,(err, ab: cc.AssetManager.Bundle)=> {\r\n                    if(err) {\r\n                        console.warn(`包名${bundleName}加载失败`);\r\n                        resolve();\r\n                        return;\r\n                    }\r\n\r\n                    let loadFileName = fileName;\r\n                    if(type == cc.SpriteFrame && cc.ENGINE_VERSION[0] == \"3\") { // 要加载纹理需要获取图片下的spiteFrame\r\n                        loadFileName += \"/spriteFrame\"\r\n                    }\r\n\r\n                    ab.load(loadFileName , type, (err, assets) => {\r\n                        if(err) {\r\n                            console.warn(`包名${bundleName}目录下文件${fileName}加载失败`);\r\n                            resolve();\r\n                            return;\r\n                        }\r\n                        this.res[fileName] = assets;\r\n                        console.log(`加载成功文件: ${fileName} 成功所在包名: ${bundleName}`);\r\n                        resolve();\r\n    \r\n                        res = assets;\r\n                    })\r\n        \r\n                    // 释放ab包, 不会释放从ab包里面加载好的资源;\r\n                    // assetManager.removeBundle(ab);\r\n                });\r\n            })\r\n        }\r\n        if(targetBundleNmae) { // 若传入包名则使用制定包名，不传入包名则遍历所有ab包寻找对应名字资源\r\n            await loadBundle(targetBundleNmae);\r\n        } else {\r\n            for(let bundleName of this.abBundleName) {\r\n                if(res) break;\r\n                await loadBundle(bundleName);\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            resolve(res);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default loaderManager.instance;\r\n"]}