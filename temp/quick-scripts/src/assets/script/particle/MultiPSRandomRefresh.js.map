{"version":3,"sources":["assets\\script\\particle\\MultiPSRandomRefresh.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n/**\r\n * 实现功能：多重（也可以只有一个）粒子节点，动态替换图集中精灵贴图，并且随机起始贴图。\r\n * 使用方式：将组件挂载在粒子节点的直接父节点上\r\n */\r\n@ccclass\r\nexport default class MultiPSRandomRefresh extends cc.Component {\r\n\r\n\r\n    @property({ type: cc.SpriteAtlas, tooltip: \"图集资源\" })\r\n    private atlas: cc.SpriteAtlas = null;\r\n    @property({ type: cc.Integer, tooltip: \"每秒替换粒子贴图多少次\" })\r\n    private aniFps: number = 15;\r\n    /**ParticleSystem节点数量 */\r\n    @property({ tooltip: \"ParticleSystem节点总数量\" })\r\n    private psNodeNum: number = 5;\r\n\r\n    @property({ tooltip: \"单粒子节点每秒发射粒子数目\" })\r\n    private emissionRate: number = 10;\r\n\r\n    /**粒子系统贴图当前下标集合 */\r\n    private psIndexArray: number[] = [];\r\n    /**粒子发射器节点集合 */\r\n    private psArray: cc.ParticleSystem[] = [];\r\n    /**图集序列总帧数 */\r\n    private count = 0;\r\n    /**图集序列帧集合 */\r\n    private spriteArray: cc.SpriteFrame[] = [];\r\n    protected onLoad(): void {\r\n        if (!this.atlas) return;\r\n\r\n        this.createrParticleSystem();\r\n    }\r\n\r\n    /**\r\n     * 初始化当前节点下粒子发射器\r\n    */\r\n    createrParticleSystem() {\r\n        this.psArray = this.node.getComponentsInChildren(cc.ParticleSystem);\r\n        this.spriteArray = this.atlas.getSpriteFrames();\r\n        this.count = this.spriteArray.length;\r\n\r\n        let startIdx = Math.round(Math.random() * this.count);\r\n        this.psIndexArray.push(startIdx)\r\n        while (this.psArray.length < this.psNodeNum) {\r\n            // for (let index = 0; index < this.psNodeNum - 1; index++) {\r\n            let cln = cc.instantiate(this.psArray[0].node);\r\n            cln.parent = this.psArray[0].node.parent;\r\n            let startIdx = Math.round(Math.random() * this.count);\r\n            this.psIndexArray.push(startIdx);\r\n            this.psArray.push(cln.getComponent(cc.ParticleSystem));\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 设置每秒发射粒子数目\r\n    */\r\n    public seEmissionRate(num: number) {\r\n        this.emissionRate = num;\r\n        this.psNodeNum = num / 2;\r\n\r\n        this.resetParticleSystem();\r\n    }\r\n\r\n    /**\r\n     * 重新生成ParticleSystem节点数量\r\n    */\r\n    private resetParticleSystem() {\r\n        if(this.psArray.length > 1) { // 节点下粒子发射器数量大于1时清除多余的\r\n            for(let i: number = 1; i < this.psArray.length; i++) {\r\n                this.psArray[i].node.removeFromParent()\r\n            }\r\n\r\n            this.psArray.length = 1;\r\n            this.psIndexArray.length = 1;\r\n        }\r\n\r\n        this.createrParticleSystem();\r\n    }\r\n    \r\n    /**\r\n     * 开始播放粒子\r\n    */\r\n    public playParticle() {\r\n        this.schedule(this.refreshSprite, 1 / this.aniFps, cc.macro.REPEAT_FOREVER);\r\n    }\r\n\r\n    /**\r\n     * 停止播放粒子\r\n    */\r\n    public stopParticle() {\r\n        this.unschedule(this.refreshSprite);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.playParticle();\r\n    }\r\n    protected onDisable(): void {\r\n        this.stopParticle();\r\n    }\r\n\r\n    /**\r\n     * 替换粒子贴图\r\n    */\r\n    private refreshSprite() {\r\n        for (let index = 0; index < this.psArray.length; index++) {\r\n            const element = this.psArray[index];\r\n            if (this.psIndexArray[index] >= this.count)\r\n                this.psIndexArray[index] = 0;\r\n            element.spriteFrame = this.spriteArray[this.psIndexArray[index]];\r\n            element.emissionRate = this.emissionRate;\r\n            element.autoRemoveOnFinish = false;\r\n            this.psIndexArray[index]++;\r\n        }\r\n    }\r\n}\r\n"]}