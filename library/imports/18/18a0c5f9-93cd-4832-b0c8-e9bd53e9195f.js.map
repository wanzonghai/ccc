{"version":3,"sources":["assets\\script\\GameWheel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport DataManager from \"./DataManager\";\r\nimport { EventId, WheelData, WheelState, WheelType } from \"./util/define\";\r\nimport EventMgr from \"./util/event/EventMgr\";\r\n\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n/**\r\n * 转盘上每个节点对应角度集合\r\n*/\r\nconst AREA_ANGEL_LIST = [14.35, 45, 22.5];\r\n\r\n/**\r\n * 转盘类型\r\n * MINI 小转盘\r\n * MEDIUM 中转盘\r\n * MAX 大转盘\r\n*/\r\nexport const WHEEL_TYPES = {\r\n    MINI: 0,\r\n    MEDIUM: 1,\r\n    MAX: 2,\r\n};\r\n\r\n/**\r\n * 转盘上节点数量集合\r\n*/\r\nexport const AREA_COUNT_LIST = [25, 8, 16];\r\n\r\n\r\n@ccclass\r\nexport default class GameWheel extends cc.Component {\r\n    @property(cc.Node)\r\n    wheelNodes: cc.Node[] = [];\r\n\r\n    @property({type: cc.Node})\r\n    lightNode: cc.Node = null;\r\n\r\n    @property({ displayName: \"加速度\", tooltip: \"加速度值,每秒速度增加几度,°/s²\" })\r\n    accelerated: number = 0;\r\n\r\n    @property({ displayName: \"减速度\", tooltip: \"加速度值,每秒速度减少几度,°/s²\" })\r\n    deceleration: number = 0;\r\n\r\n    @property({ displayName: \"最大速度\", tooltip: \"每秒速度减少几度,°/s\" })\r\n    maxRangeSpeed: number = 0;\r\n\r\n    \r\n    /**\r\n     * 当前转盘类型\r\n    */\r\n    private _curWheelType = WHEEL_TYPES.MINI;\r\n    private _range = 0;\r\n    private _currentRotationSpeed = 0;\r\n    private _targetRotation = 0;\r\n    private _totalPrize = 0;\r\n    private _resultId = 0;\r\n    private _lotteryId = 0;\r\n    private _interval = 0;\r\n     /**\r\n      * WheelState.Stand:静止 WheelState.Acelerara:加速 WheelState.Desacelerar:减速 \r\n     */\r\n    private _currentState: WheelState = WheelState.Stand;\r\n    private _mixRotation = 0;\r\n    // LIFE-CYCLE CALLBACKS:\r\n    private _wheelConfig: WheelData[] = [];\r\n    private _maxTargetNode: cc.Node = null;\r\n    private _isPlayEndSound: boolean = false;\r\n\r\n    /** 结束回调 */\r\n    endCall = null;\r\n\r\n    onLoad() {\r\n        this.resetAngle();\r\n        // this.lightNode.active = false;\r\n    }\r\n\r\n    public updateWheelConfig(wheelConfig: any) {\r\n        // if (this.getRunning()) return;\r\n        this.resetWheel();\r\n        if (this._wheelConfig.length > 0) {\r\n            return;\r\n        }\r\n        this._wheelConfig = [];\r\n        let wheelData: WheelData;\r\n        wheelConfig.forEach(v => {\r\n            wheelData = {} as WheelData;\r\n            if (v.value >= 0) {\r\n                wheelData.type = WheelType.BetLv;\r\n                wheelData.num = v.value / 100;\r\n            } else {\r\n                wheelData.type = WheelType.Spin;\r\n                wheelData.num = Math.abs(v.value) / 100;\r\n            }\r\n            this._wheelConfig.push(wheelData);\r\n        })\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        // this.playZoomInAnimation();\r\n        this.initWheel();\r\n    }\r\n\r\n    /**\r\n     * 初始化轮盘数据\r\n     */\r\n    private initWheel() {\r\n        let wheelChilds = this.wheelNodes[this._curWheelType].children;\r\n        let maxBetlv = 0;\r\n        if (this.wheelNodes[this._curWheelType]) { \r\n            for (let i = 0; i < AREA_COUNT_LIST[this._curWheelType]; i++) {\r\n                // let child = wheelChilds[i];\r\n                // let label = cc.find(\"label\", child);\r\n                if (this._wheelConfig[i].type == WheelType.BetLv) {\r\n                    // label.getComponent(cc.Label).string = \"x\" + this._wheelConfig[i].num;\r\n                    if (this._wheelConfig[i].num > maxBetlv) {       //找到倍率最大的目标节点\r\n                        maxBetlv = this._wheelConfig[i].num;\r\n                        this._maxTargetNode = wheelChilds[i];\r\n                    }\r\n                } else if (this._wheelConfig[i].type == WheelType.Spin) {\r\n                    // label.getComponent(cc.Label).string = \"Spin \" + this._wheelConfig[i].num;\r\n                }\r\n            }\r\n        }\r\n        this.resetAngle();\r\n    }\r\n\r\n    /**\r\n     * 初始化转盘属性\r\n     */\r\n    private initProperties() {\r\n        // 旋转角度范围\r\n        this._range = 360;\r\n        // 当前旋转速度\r\n        this._currentRotationSpeed = 0;\r\n        // 最小层转盘有一个假的图片这\r\n        this._totalPrize = this.wheelNodes[this._curWheelType].children.length;\r\n        this._resultId = this._totalPrize + 1 - this._resultId;\r\n        // 时间间隔\r\n        this._interval = 0.02;\r\n        this.accelerated = 360 * 6;\r\n        this.deceleration = -360 * 2;\r\n        this.maxRangeSpeed = 360 * 4;\r\n        this._isPlayEndSound = false;\r\n    }\r\n\r\n    /**\r\n     * 开始滚动\r\n    */\r\n    public runGame(index: any, endCall) {\r\n        this.endCall = endCall;\r\n        // this.lightNode.active = false;\r\n        // this._curWheelType = 1;\r\n        this._resultId = index;\r\n        this._lotteryId = index;\r\n        console.log(\"中奖id =\" + this._resultId);\r\n        this.initProperties();\r\n        this.run();\r\n    }\r\n\r\n    /**\r\n     * 结束滚动重置位置\r\n    */\r\n    public resetWheel() {\r\n        this.unschedule(this.updateRotation);\r\n        this._currentRotationSpeed = 0; //当前速度设置为 0rad/s\r\n        this._currentState = WheelState.Stand;\r\n    }\r\n\r\n    /**\r\n     * 展示当前层转盘滚动结果\r\n    */\r\n    public showWheelEnd() {\r\n        this.unschedule(this.updateRotation);\r\n        this._currentRotationSpeed = 0; //当前速度设置为 0rad/s\r\n        this._currentState = WheelState.Stand;\r\n        this.wheelNodes[this._curWheelType].angle = this._lotteryId * AREA_ANGEL_LIST[this._curWheelType];\r\n        \r\n        // 滚动结束\r\n        // this.lightNode.active = true;\r\n        this.endCall && this.endCall();\r\n        console.log(\"滚动结束\");\r\n\r\n    }\r\n\r\n    private run() {\r\n        if (!this.getRunning()) {\r\n            this._currentState = WheelState.Acelerara;\r\n            this.schedule(this.updateRotation, this._interval);\r\n        } else {\r\n            console.log(\"转盘已经开始转动...\");\r\n        }\r\n    }\r\n\r\n    private stop() {\r\n        this.resetWheel();\r\n        // this.lightNode.active = true;\r\n        this.endCall && this.endCall();\r\n    }\r\n\r\n    /**\r\n     * 获取从最大加速度减速到停止的总角度\r\n     *  */ \r\n    private onVirtualCompute() {\r\n        var virtualRotationAngle = 0;\r\n        var rotationSpeed = this.maxRangeSpeed;\r\n        while (rotationSpeed > 0) {\r\n            virtualRotationAngle += this._interval * rotationSpeed; // 获取减速度到停止时候的总旋转角度\r\n            rotationSpeed += this._interval * this.deceleration; // 每帧旋转的速度\r\n        }\r\n        return virtualRotationAngle;\r\n    }\r\n\r\n    /**\r\n     * 获取开始减速的时机 角度\r\n     * @param targetRotation 从初始位置（加速度或者减速度都是360度整的所以直接从编辑器里的初始位置）旋转到目标模块位置的角度\r\n     * */ \r\n    private onGetValue(targetRotation) {\r\n        var temp = targetRotation - this.onVirtualCompute();\r\n        if (temp > 0) {\r\n            while (temp >= 360) {\r\n                temp -= this._range;\r\n            }\r\n        } else {\r\n            while (temp < 0) {\r\n                temp += this._range;\r\n            }\r\n        }\r\n        return temp;\r\n    }\r\n\r\n    /**\r\n     * 转动检测\r\n     */\r\n    private detectionAngle() {\r\n        // console.log(\"角度检测中,寻找合适减速时机...\")\r\n        // 目标旋转角度\r\n        let _zeroRotation = this._range - AREA_ANGEL_LIST[this._curWheelType] * (2 + this._curWheelType);\r\n        this._targetRotation = _zeroRotation - (AREA_COUNT_LIST[this._curWheelType] - this._resultId) * AREA_ANGEL_LIST[this._curWheelType];\r\n        this._targetRotation = this._targetRotation;\r\n        var tempRotation = this.onGetValue(this._targetRotation);\r\n        this.wheelNodes[this._curWheelType].angle = -tempRotation;\r\n        this._currentState = WheelState.Desacelerar;\r\n    }\r\n\r\n    /**\r\n     * 每一帧回调\r\n     * @param {*}  \r\n     */\r\n    private updateRotation() {\r\n        console.log(\"update curState= \" + this._currentState);\r\n        switch (this._currentState) {\r\n            case 0:\r\n                break;\r\n            case 1:\r\n                {\r\n                    // 旋转完成开始停止\r\n                    if (this._currentRotationSpeed >= this.maxRangeSpeed) {\r\n                        this._currentRotationSpeed = this.maxRangeSpeed;\r\n                        this.detectionAngle();\r\n                    } else {\r\n                        // 是加速度的同时也是初始速度\r\n                        this._currentRotationSpeed += this.accelerated * this._interval;\r\n                    }\r\n                }\r\n                break;\r\n            case 2:\r\n                {\r\n                    if (this._currentRotationSpeed <= 0) {\r\n                        this._currentRotationSpeed = 0; //当前速度设置为 0rad/s\r\n                        this._currentState = WheelState.Stand;\r\n                        this.stop();\r\n                    } else {\r\n                        if (this.maxRangeSpeed / this._currentRotationSpeed >= 1) {\r\n                        }\r\n                        if (this.maxRangeSpeed / this._currentRotationSpeed >= 3) {\r\n                            // this.pointSpine.timeScale = 1;\r\n                        }\r\n                        if (this.maxRangeSpeed / this._currentRotationSpeed >= 5) {\r\n                            // this.pointSpine.timeScale = 0.5;\r\n                        }\r\n                        if (this._currentRotationSpeed <= 50) {\r\n                            let mod = Math.floor(Math.abs(this.wheelNodes[this._curWheelType].angle / 360));\r\n                            this._mixRotation = (mod * 360 + this._targetRotation) - Math.abs(this.wheelNodes[this._curWheelType].angle);\r\n                            this.stop();\r\n                            return;\r\n                        }\r\n                        this._currentRotationSpeed += this.deceleration * this._interval;\r\n                        // console.log(\"TTTTT this._currentRotationSpeed = \" + this._currentRotationSpeed + \" rarotion = \" + this.wheelNodes[this._curWheelType].angle + \" targetAngle =\" + this._targetRotation);\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                {\r\n                    this.stop();\r\n                }\r\n                break;\r\n        }\r\n        // cc.log(\"当前旋转速度 : \", this._currentRotationSpeed);\r\n        var tempRotationSpeed = this._currentRotationSpeed * this._interval;\r\n        // cc.log(\"TTTTT 当前转盘转动速度\" + tempRotationSpeed + \"°/\" + this._interval + \"s\");\r\n        this.wheelNodes[this._curWheelType].angle -= tempRotationSpeed;\r\n        // this.virtualWheel.angle = this.wheelNodes[this._curWheelType].angle;\r\n    }\r\n\r\n    //获取两个数间的随机值\r\n    private getRandom(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    private getRandomIndex(l) {\r\n        if (l <= 0) return 0;\r\n        return Math.round(Math.random() * l);\r\n    }\r\n\r\n    /**\r\n     * 转盘是否正在滚动\r\n     * @returns \r\n     */\r\n    public getRunning(): boolean {\r\n        return this._currentState > WheelState.Stand;\r\n    }\r\n\r\n    public getTargetNode(): cc.Node {\r\n        let target = this.wheelNodes[this._curWheelType].children[0];\r\n        if (target) {\r\n            return target;\r\n        }\r\n    }\r\n\r\n    public resetAngle() {\r\n        this.wheelNodes[this._curWheelType].angle = 0; // 第一个转盘初始位置不同\r\n    }\r\n\r\n    update(dt) {\r\n\r\n    }\r\n}\r\n"]}