{"version":3,"sources":["assets\\script\\util\\util.ts"],"names":[],"mappings":";;;;;;AAAA;IAAA;QAAA,iBA0GC;QAxFG;;UAEE;QACF,YAAO,GAAG,UAAC,GAAQ;YAAR,oBAAA,EAAA,QAAQ;YACf,IAAI,MAAM,GAAG,IAAI,CAAC;YAElB,cAAc;YACd,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,QAAQ,IAAI,GAAG,KAAK,IAAI,EAAE;gBAC1C,MAAM,GAAG,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAgB,WAAW;gBACnE,KAAK,IAAI,CAAC,IAAI,GAAG,EAAE;oBACf,MAAM,CAAC,CAAC,CAAC,GAAG,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;iBACnC,CAAgB,YAAY;aAChC;iBAAK;gBACF,MAAM,GAAG,GAAG,CAAA;aACf;YAAA,CAAC;YACF,OAAO,MAAM,CAAC;QAClB,CAAC,CAAA;IAwEL,CAAC;IAvGG,4BAA4B;IACrB,wBAAS,GAAhB,UAAiB,GAAG,EAAE,GAAG;QACrB,IAAG,GAAG,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;YAAE,OAAO;QAClC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IAC7D,CAAC;IAEA,YAAY;IACZ,2BAAY,GAAZ,UAAa,GAAU,EAAC,GAAU,EAAC,MAAa;QAC7C,IAAI,WAAW,GAAiB,EAAE,CAAA;QAClC,KAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,MAAM,EAAC,CAAC,EAAE,EAAC;YACrB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC,CAAA;SAC5C;QACD,OAAO,WAAW,CAAA;IACtB,CAAC;IAoBD;;;;;MAKE;IACK,gCAAiB,GAAxB,UAAyB,IAAgB,EAAE,OAAe,EAAE,YAA6B;QAAzF,iBA2BC;QA3B2D,6BAAA,EAAA,oBAA6B;QACrF,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,CAAC,MAAM,CAAA;QAEX,IAAG,YAAY,EAAE;YACb,KAAI,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;gBACrC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC,CAAA;aAClE;SACJ;aAAM;YACH,IAAI,SAAO,GAAG;gBACV,IAAG,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;oBACrB,OAAO;iBACV;gBACD,IAAI,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEvE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACtB,IAAG,EAAE,OAAO,GAAG,CAAC,EAAE;oBACd,SAAO,EAAE,CAAC;iBACb;YACL,CAAC,CAAA;YAED,SAAO,EAAE,CAAC;SACb;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;IACA;;KAEC;IACF,iCAAkB,GAAlB,UAAmB,EAAkB,EAAE,MAAc,EAAE,MAAc;QACjE,IAAI,EAAE,GAAG,EAAE,CAAC,UAAU,EAAE,CAAC;QACzB,IAAI,QAAQ,GAAG,EAAE,CAAC,KAAK,GAAC,MAAM,CAAC;QAC/B,IAAI,SAAS,GAAG,EAAE,CAAC,MAAM,GAAC,MAAM,CAAC;QACjC,IAAI,MAAM,GAAiC,EAAE,CAAC;QAC9C,KAAI,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAChB,KAAI,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAI,MAAM,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;gBACpC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,QAAQ,EAAE,CAAC,GAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;gBAC5E,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC1B;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;;MAIE;IACF,0BAAW,GAAX,UAAY,IAAY,EAAE,UAAoB;QAC1C,IAAI,QAAQ,GAAG,EAAC,GAAG,EAAE,CAAC,EAAC,CAAC;QACxB,IAAI,MAAM,GAAG,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC;QACxB,IAAI,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC;aACtB,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,EAAC,QAAQ,EAAE,UAAC,KAAa,EAAE,GAAW,EAAE,OAAe,EAAE,KAAa;gBACpF,UAAU,CAAC,KAAK,CAAC,CAAC;gBAClB,OAAM;YACV,CAAC,EAAC,CAAC,CAAA;QACH,EAAE,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,EAAE,CAAA;IACjB,CAAC;IAvGsB,aAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;IAyGjD,WAAC;CA1GD,AA0GC,IAAA;AACD,kBAAe,IAAI,CAAC,QAAQ,CAAC","file":"","sourceRoot":"/","sourcesContent":["class util{\n    public static readonly instance = new util();\n\n    /** 获取两个数间的随机值(包括min max) */\n    public getRandom(min, max) {\n        if(min == -1 || max == -1) return;\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n     /**随机生成数组 */\n     getRandArray(min:number,max:number,length:number):Array<number>{\n        let NumberArray:Array<number> = []\n        for(let i=0;i<length;i++){\n            NumberArray.push(this.getRandom(min,max))\n        }\n        return NumberArray\n    }\n\n    /**\n     * 深拷贝\n    */\n    copyObj = (obj = {}) => {            //变量先置空\n        let newobj = null;  \n\n        //判断是否需要继续进行递归\n        if (typeof (obj) == 'object' && obj !== null) {\n            newobj = obj instanceof Array ? [] : {};                //进行下一层递归克隆\n            for (var i in obj) {\n                newobj[i] = this.copyObj(obj[i])\n            }                //如果不是对象直接赋值\n        } else{\n            newobj = obj\n        };            \n        return newobj;    \n    }\n\n    /**\n     * 随机获取数组中指定数量元素\n     * @param list 提供数据的数组\n     * @param itemNum 获取元素数量(当需要元素不重复时此值大于数组长度会打乱返回整个数组)\n     * @param isRepetition 返回元素是否允许重复\n    */\n    public getRandomListItme(list: Array<any>, itemNum: number, isRepetition: boolean = false) {\n        let copyList = this.copyObj(list);\n        let randomList = [];\n\n        list.splice\n\n        if(isRepetition) {\n            for(let i: number = 0; i < itemNum; i++) {\n                randomList.push(copyList[this.getRandom(0, copyList.length-1)])\n            }\n        } else {\n            let getItem = () => {\n                if(copyList.length == 0) {\n                    return;\n                }\n                let item = copyList.splice(this.getRandom(0, copyList.length-1), 1)[0];\n\n                randomList.push(item);\n                if(--itemNum > 0) {\n                    getItem();\n                }\n            }\n\n            getItem();\n        }\n\n        return randomList;\n    }\n     /**\n     * 网格裁切纹理\n    */\n    gridCutSpriteFrame(sf: cc.SpriteFrame, rowNum: number, colNum: number) {\n        let sp = sf.getTexture();\n        let picWidth = sp.width/colNum;\n        let picHeight = sp.height/rowNum;\n        let sfList: Array<Array<cc.SpriteFrame>> = [];\n        for(let i: number = 0; i < rowNum; i++) {\n            sfList.push([]);\n            for(let j: number = 0; j < colNum; j++) {\n                let cutPic = new cc.SpriteFrame(sp);\n                cutPic.setRect(new cc.Rect(j * picWidth, i*picHeight, picWidth, picHeight));\n                sfList[i].push(cutPic);\n            }\n        }\n        return sfList;\n    }\n\n    /**\n     * 缓动更新事件\n     * @param time 缓动运动时间\n     * @param updateFunc 每帧调用的事件会传入百分比\n    */\n    tweenUpdate(time: number, updateFunc: Function) {\n        let startObj = {num: 0};\n        let endObj = {num: 100};\n        let tw = cc.tween(startObj)\n            .to(time, endObj, {progress: (start: number, end: number, current: number, ratio: number): number => {\n                updateFunc(ratio);\n                return\n            }})\n            tw.start();\n            return tw\n    }\n\n}\nexport default util.instance;"]}